
buildscript {

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'no.nils:wsdl2java:0.10'
        classpath 'org.jooq:jooq-codegen:3.10.0'
        classpath 'com.h2database:h2:1.4.196'
    }
}

plugins {
    id "java"
    id "application"
    id "no.nils.wsdl2java" version "0.10"
    id "org.flywaydb.flyway" version "4.2.0"
}

group 'com.kainos'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

mainClassName="com.kainos.MIGApplication"
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.javatuples/javatuples
    compile group: 'org.javatuples', name: 'javatuples', version: '1.2'
    // https://mvnrepository.com/artifact/io.dropwizard/dropwizard-core
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.2.0'
    // https://mvnrepository.com/artifact/com.hubspot.dropwizard/dropwizard-guice
    compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'
    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'
    // https://mvnrepository.com/artifact/org.jooq/jooq
    compile group: 'org.jooq', name: 'jooq', version: '3.10.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

wsdl2java {
    generatedWsdlDir = file("generated")  // target directory for generated source coude
    wsdlDir = file("src/main/resources/wsdl") // define to support incremental build
    wsdlsToGenerate = [['src/main/resources/wsdl/sample.wsdl']]
}

// Configure the run task to start the Dropwizard service
run {
    args 'server', './src/main/resources/config.yml'
}

flyway {
    url = 'jdbc:h2:file:./currencydb'
    user = 'sa'
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
    jdbc() {
        driver('org.h2.Driver')
        url('jdbc:h2:./currencydb')
        user('sa')
        password('')
    }

    generator() {
        database() {
            inputSchema('CURRENCY_SCHEMA')
        }

        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            pojos true
            daos true
        }
        target() {
            packageName('com.kainos.db')
            directory('./generated')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)
