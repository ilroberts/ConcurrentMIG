/*
 * This file is generated by jOOQ.
*/
package com.kainos.db.tables;


import com.kainos.db.CurrencySchema;
import com.kainos.db.Indexes;
import com.kainos.db.Keys;
import com.kainos.db.tables.records.CurrencyCodeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyCode extends TableImpl<CurrencyCodeRecord> {

    private static final long serialVersionUID = -434909643;

    /**
     * The reference instance of <code>CURRENCY_SCHEMA.CURRENCY_CODE</code>
     */
    public static final CurrencyCode CURRENCY_CODE = new CurrencyCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyCodeRecord> getRecordType() {
        return CurrencyCodeRecord.class;
    }

    /**
     * The column <code>CURRENCY_SCHEMA.CURRENCY_CODE.CODE</code>.
     */
    public final TableField<CurrencyCodeRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>CURRENCY_SCHEMA.CURRENCY_CODE.DESCRIPTION</code>.
     */
    public final TableField<CurrencyCodeRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>CURRENCY_SCHEMA.CURRENCY_CODE</code> table reference
     */
    public CurrencyCode() {
        this(DSL.name("CURRENCY_CODE"), null);
    }

    /**
     * Create an aliased <code>CURRENCY_SCHEMA.CURRENCY_CODE</code> table reference
     */
    public CurrencyCode(String alias) {
        this(DSL.name(alias), CURRENCY_CODE);
    }

    /**
     * Create an aliased <code>CURRENCY_SCHEMA.CURRENCY_CODE</code> table reference
     */
    public CurrencyCode(Name alias) {
        this(alias, CURRENCY_CODE);
    }

    private CurrencyCode(Name alias, Table<CurrencyCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrencyCode(Name alias, Table<CurrencyCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CurrencySchema.CURRENCY_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrencyCodeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrencyCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrencyCodeRecord>>asList(Keys.CONSTRAINT_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrencyCode as(String alias) {
        return new CurrencyCode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrencyCode as(Name alias) {
        return new CurrencyCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrencyCode rename(String name) {
        return new CurrencyCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrencyCode rename(Name name) {
        return new CurrencyCode(name, null);
    }
}
